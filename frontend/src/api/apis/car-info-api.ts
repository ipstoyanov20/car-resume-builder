/* tslint:disable */
/* eslint-disable */
/**
 * Resume Car Builder API
 * An API for Resume Car Builder
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CarInfoVM } from '../models';
import { ResumeVM } from '../models';
/**
 * CarInfoApi - axios parameter creator
 * @export
 */
export const CarInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Endpoint for getting a specific car info by its id.
         * @param {string} id Id of the car info to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarInfoIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiCarInfoIdGet.');
            }
            const localVarPath = `/api/CarInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a car info by its id.
         * @param {string} id Id of the car info to update.
         * @param {string} [brand] 
         * @param {string} [model] 
         * @param {string} [yearOfManufacture] 
         * @param {string} [description] 
         * @param {string} [distance] 
         * @param {string} [color] 
         * @param {string} [price] 
         * @param {string} [engine] 
         * @param {string} [status] 
         * @param {Blob} [carImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCarInfoIdPutForm: async (id: string, brand?: string, model?: string, yearOfManufacture?: string, description?: string, distance?: string, color?: string, price?: string, engine?: string, status?: string, carImage?: Blob, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiCarInfoIdPutForm.');
            }
            const localVarPath = `/api/CarInfo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (brand !== undefined) { 
                localVarFormParams.append('Brand', brand as any);
            }

            if (model !== undefined) { 
                localVarFormParams.append('Model', model as any);
            }

            if (yearOfManufacture !== undefined) { 
                localVarFormParams.append('YearOfManufacture', yearOfManufacture as any);
            }

            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }

            if (distance !== undefined) { 
                localVarFormParams.append('Distance', distance as any);
            }

            if (color !== undefined) { 
                localVarFormParams.append('Color', color as any);
            }

            if (price !== undefined) { 
                localVarFormParams.append('Price', price as any);
            }

            if (engine !== undefined) { 
                localVarFormParams.append('Engine', engine as any);
            }

            if (status !== undefined) { 
                localVarFormParams.append('Status', status as any);
            }

            if (carImage !== undefined) { 
                localVarFormParams.append('CarImage', carImage as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarInfoApi - functional programming interface
 * @export
 */
export const CarInfoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Endpoint for getting a specific car info by its id.
         * @param {string} id Id of the car info to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarInfoIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CarInfoVM>>> {
            const localVarAxiosArgs = await CarInfoApiAxiosParamCreator(configuration).apiCarInfoIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a car info by its id.
         * @param {string} id Id of the car info to update.
         * @param {string} [brand] 
         * @param {string} [model] 
         * @param {string} [yearOfManufacture] 
         * @param {string} [description] 
         * @param {string} [distance] 
         * @param {string} [color] 
         * @param {string} [price] 
         * @param {string} [engine] 
         * @param {string} [status] 
         * @param {Blob} [carImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarInfoIdPutForm(id: string, brand?: string, model?: string, yearOfManufacture?: string, description?: string, distance?: string, color?: string, price?: string, engine?: string, status?: string, carImage?: Blob, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ResumeVM>>> {
            const localVarAxiosArgs = await CarInfoApiAxiosParamCreator(configuration).apiCarInfoIdPutForm(id, brand, model, yearOfManufacture, description, distance, color, price, engine, status, carImage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CarInfoApi - factory interface
 * @export
 */
export const CarInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Endpoint for getting a specific car info by its id.
         * @param {string} id Id of the car info to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarInfoIdGet(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<CarInfoVM>> {
            return CarInfoApiFp(configuration).apiCarInfoIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a car info by its id.
         * @param {string} id Id of the car info to update.
         * @param {string} [brand] 
         * @param {string} [model] 
         * @param {string} [yearOfManufacture] 
         * @param {string} [description] 
         * @param {string} [distance] 
         * @param {string} [color] 
         * @param {string} [price] 
         * @param {string} [engine] 
         * @param {string} [status] 
         * @param {Blob} [carImage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCarInfoIdPutForm(id: string, brand?: string, model?: string, yearOfManufacture?: string, description?: string, distance?: string, color?: string, price?: string, engine?: string, status?: string, carImage?: Blob, options?: AxiosRequestConfig): Promise<AxiosResponse<ResumeVM>> {
            return CarInfoApiFp(configuration).apiCarInfoIdPutForm(id, brand, model, yearOfManufacture, description, distance, color, price, engine, status, carImage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarInfoApi - object-oriented interface
 * @export
 * @class CarInfoApi
 * @extends {BaseAPI}
 */
export class CarInfoApi extends BaseAPI {
    /**
     * 
     * @summary Endpoint for getting a specific car info by its id.
     * @param {string} id Id of the car info to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarInfoApi
     */
    public async apiCarInfoIdGet(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<CarInfoVM>> {
        return CarInfoApiFp(this.configuration).apiCarInfoIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a car info by its id.
     * @param {string} id Id of the car info to update.
     * @param {string} [brand] 
     * @param {string} [model] 
     * @param {string} [yearOfManufacture] 
     * @param {string} [description] 
     * @param {string} [distance] 
     * @param {string} [color] 
     * @param {string} [price] 
     * @param {string} [engine] 
     * @param {string} [status] 
     * @param {Blob} [carImage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarInfoApi
     */
    public async apiCarInfoIdPutForm(id: string, brand?: string, model?: string, yearOfManufacture?: string, description?: string, distance?: string, color?: string, price?: string, engine?: string, status?: string, carImage?: Blob, options?: AxiosRequestConfig) : Promise<AxiosResponse<ResumeVM>> {
        return CarInfoApiFp(this.configuration).apiCarInfoIdPutForm(id, brand, model, yearOfManufacture, description, distance, color, price, engine, status, carImage, options).then((request) => request(this.axios, this.basePath));
    }
}
